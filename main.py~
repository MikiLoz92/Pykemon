# coding: utf-8

import pygame
from maps import *
from objects import *

pygame.display.init()
screen = pygame.display.set_mode((480,240),pygame.HWSURFACE,32)
pygame.display.set_caption("Test")

m = Map("001.tmx")

viewX = 0
viewY = 0

quit = False
key = [False,False,False,False]
anyKey = True in key
keyPressed = [False,False,False,False]

def blitMap(m):
	for i in m.map:
		y = 0
		for j in i:
			x = 0
			for k in j:
				# Hay que tener en cuenta que las tiles vacías en el Tiled
				# se representan con un 0, con lo que aquí serán un -1.
				if k != -1:
					screen.blit(m.tileset.t[k].convert(),(x+viewX,y+viewY))
				x += pygame.Surface.get_width(m.tileset.t[0])	
			y += pygame.Surface.get_height(m.tileset.t[0])


class Hero(pygame.sprite.Sprite):

	def __init__(self):
		self.spritesheet = pygame.image.load("sprites/001.png")
		self.images = [[],[],[],[]]
		for i in range(4):
			for j in range(4):
				tempS = pygame.Surface((32,32),pygame.SRCALPHA)
				tempS.blit(self.spritesheet,(0,0),(32*j,32*i,32,32))
				self.images[i].append(tempS)
		self.images.insert(0,self.images[3])
		del self.images[4]
		self.image = self.images[0][0]
		self.facing = 1
		self.isMoving = False
		self.onTile = [0,0]
		self.nextTile = self.onTile
		self.counter = 0

	def __update__(self):
		"""
		Método privado, usado por el programa para actualizar todas las instancias en escena que lo contengan.
		"""
		if not self.isMoving:
			for i in key:
				if i:
					if self.facing == i:
						# Caminar en dirección de la tecla o el facing
						self.isMoving = True
					elif not self.facing == i and self.isMoving:
						self.facing = i
						self.setNextTile(i)
					else:
						if not key[i]:
							self.facing = i
							self.counter = 0
							break
						elif key[i] and self.counter == 5:
							self.facing = i
							self.isMoving = True
							self.setNextTile(i)
							self.counter = 0
							break
						self.counter += 1
		# -- RUTINA DE DIBUJADO DE SPRITE --
		
		self.setFacing()
		self.image = self.images[self.facing][0]

	def setNextTile(self, i):
		if i == 0:
			self.nextTile[0] -= 1;
		elif i == 1:
			self.nextTile[0] += 1
		elif i == 2:
			self.nextTile[1] -= 1
		elif i == 3:
			self.nextTile[1] += 1

	def setFacing(self):
		if key[0]:
			self.facing = 0
		elif key[1]:
			self.facing = 1
		elif key[2]:
			self.facing = 2
		elif key[3]:
			self.facing = 3
		

h = Hero()

while not quit:
	# Llevar a cabo tareas de input
	pygame.event.pump()
	for i in range(len(keyPressed)):
		keyPressed[i] = False
	for e in pygame.event.get():
		if e.type == pygame.KEYDOWN:
			if e.key == pygame.K_UP:
				key[0] = True
			if e.key == pygame.K_DOWN:
				key[1] = True
			if e.key == pygame.K_LEFT:
				key[2] = True
			if e.key == pygame.K_RIGHT:
				key[3] = True
		elif e.type == pygame.KEYUP:
			if e.key == pygame.K_UP:
				key[0] = False
			if e.key == pygame.K_DOWN:
				key[1] = False
			if e.key == pygame.K_LEFT:
				key[2] = False
			if e.key == pygame.K_RIGHT:
				key[3] = False
		elif e.type == pygame.QUIT:
			quit = True
	print key
	blitMap(m)
	h.update()
	screen.blit(h.image,(-6,-12))
	pygame.display.flip()
	pass

